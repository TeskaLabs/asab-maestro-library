define:
  type: rc/descriptor
  name: Grafana
  url: https://github.com/grafana/grafana

secrets:
  GRAFANA_PASSWORD: {}
  GRAFANA_CLIENT_SECRET: {}

descriptor:
  image: grafana/grafana

  user: "10003:10003"

  volumes:
    - "{{SLOW_STORAGE}}/{{INSTANCE_ID}}/data:/var/lib/grafana"
    - "{{SITE}}/{{INSTANCE_ID}}/provisioning:/etc/grafana/provisioning"

  environment:
    GF_SECURITY_ADMIN_USER: grafana_admin
    GF_SECURITY_ADMIN_PASSWORD: "{{GRAFANA_PASSWORD}}"
    GF_SECURITY_ALLOW_EMBEDDING: "true" # Allow to use iframe
    GF_SERVER_ROOT_URL: "{{PUBLIC_URL}}/grafana/"
    GF_AUTH_GENERIC_OAUTH_ENABLED: true # false if there's no seacat-auth
    GF_AUTH_GENERIC_OAUTH_TLS_SKIP_VERIFY_INSECURE: true
    GF_AUTH_GENERIC_OAUTH_AUTO_LOGIN: true
    GF_AUTH_GENERIC_OAUTH_USE_PKCE: false
    GF_AUTH_GENERIC_OAUTH_USE_REFRESH_TOKEN: false
    GF_AUTH_GENERIC_OAUTH_NAME: Seacat Auth
    GF_AUTH_GENERIC_OAUTH_CLIENT_ID: grafana
    GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: "{{GRAFANA_CLIENT_SECRET}}"
    GF_AUTH_GENERIC_OAUTH_SCOPES: openid email profile
    GF_AUTH_GENERIC_OAUTH_AUTH_URL: "{{PUBLIC_URL}}/api/openidconnect/authorize"
    GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "{{SEACAT_AUTH_PUBLIC}}/openidconnect/token"
    GF_AUTH_GENERIC_OAUTH_API_URL: "{{SEACAT_AUTH_PUBLIC}}/openidconnect/userinfo"
    GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_STRICT: true
    GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: contains(resources."*"[*], 'authz:superuser') && 'Admin' || contains(resources."*"[*], 'tools:grafana:edit') && 'Editor' || contains(resources."*"[*], 'tools:grafana:access') && 'Viewer'
    GF_AUTH_GENERIC_OAUTH_LOGIN_ATTRIBUTE_PATH: preferred_username || username || sub
    GF_AUTH_GENERIC_OAUTH_NAME_ATTRIBUTE_PATH: preferred_username || username || sub
    GF_AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_PATH: email || sub
    GF_AUTH_SIGNOUT_REDIRECT_URL: "{{PUBLIC_URL}}"
    GF_LOG_LEVEL: warn

files:
  - "provisioning/"
  - "provisioning/datasources/lmio-influxdb-metrics.yaml": |
      # config file version
      apiVersion: 1

      # list of datasources that should be deleted from the database
      deleteDatasources:
        - name: InfluxDB Metrics
          orgId: 1

      # list of datasources to insert/update depending
      # whats available in the database
      datasources:
      - name: InfluxDB Metrics
        uid: lmio-influxdb-metrics
        orgId: 1

        type: influxdb
        typeName: "InfluxDB"
        typeLogoUrl: "/grafana/public/app/plugins/datasource/influxdb/img/influxdb_logo.svg"
        access: proxy

        url: http://influxdb:8086

        user: ""
        database: ""
        basicAuth: false

        isDefault: true
        readOnly: false

        jsonData:
          dbName: "metrics"
          httpHeaderName1: Authorization
          httpMode: POST
          version: InfluxQL
          timeInterval: 1m

        secureJsonData:
          httpHeaderValue1: "Token {{INFLUXDB_TOKEN}}"
  # Files targeted to mongo sherpa dedicated folder. These auth items (client, resources) are managed by maestro.
  - service://seacat-auth/script/to_upload/grafana/cl.json: |
      [{
        "_id": "grafana",
        "application_type": "web",
        "authorize_anonymous_users": false,
        "client_name": "Grafana",
        "code_challenge_method": "none",
        "grant_types": [
          "authorization_code"
        ],
        "redirect_uri_validation_method": "prefix_match",
        "redirect_uris": [
          "{{PUBLIC_URL}}/grafana"
        ],
        "response_types": [
          "code"
        ],
        "token_endpoint_auth_method": "client_secret_post",
        "__client_secret": "{{GRAFANA_CLIENT_SECRET|argon2_hash}}",
        "client_uri": "{{PUBLIC_URL}}/grafana"
      }]
  - service://seacat-auth/script/to_upload/grafana/rs.json: |
      [{
        "_id": "tools:grafana:access",
        "description": "Access Grafana."
      },
      {
        "_id": "tools:grafana:edit",
        "description": "Edit Grafana content."
      }]

nginx:
  upstreams:
    upstream-grafana: 3000
  https:
    location /grafana:
    - rewrite ^/grafana/(.*) /$1 break
    - proxy_pass http://upstream-grafana
    - proxy_set_header Host $host

asab-config:
  Tools:
     Grafana: 
        file: 
          {
              "Tool": {
                  "name": "Grafana",
                  "url": "/grafana/",
                  "image": "media/tools/grafana.svg"
              },
              "Authorization": {
                  "tenants": "system"
              }
          }
        if_not_exists: false
